@page  "/configFile"

@inject IFileReaderService  fileReaderService;
@inject IFileService  fileService;
@inject IJSRuntime js;
@using  System.Text;
<h4>Upload your configuration file</h4>

@if (!String.IsNullOrEmpty(ErrorMessage))
{
	<div class="alert alert-danger" role="alert">
		<strong>@ErrorMessage</strong>
		<button type="button" class="close" data-dismiss="alert" aria-label="Close">
			<span aria-hidden="true">&times;</span>
		</button>
	</div>
}

<input type="file" @ref=inputTypeFileElement />
<div class="mt-2 mb-2">
	<button @onclick=ReadFile class="btn btn-primary">Read file</button>
</div>

<h4>Download configuration file</h4>
<div class="mt-2">
	<button @onclick=DownloadFile class="btn btn-primary">Download config file</button>
</div>
@code {
	ElementReference inputTypeFileElement;
	string ErrorMessage { get; set; }

	public async Task ReadFile()
	{
		var nl = Environment.NewLine;
		var files = (await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync()).ToList();

		foreach (var file in files)
		{
			var fileInfo = await file.ReadFileInfoAsync();

			using (var fs = await file.OpenReadAsync())
			{
				await fileService.UploadConfigFileAsync(fs, fileInfo.Name);
			}
		}
	}

	public async Task DownloadFile()
	{
		string jsonFileEntries = await fileService.DownloadConfigFileAsync();
		if (jsonFileEntries == null)
		{
			ErrorMessage = "There are no files to be stored.";
			this.StateHasChanged();
		}

		byte[] fileContent = Encoding.ASCII.GetBytes(jsonFileEntries);

		// TODO: encrypt config file

		await FileUtil.SaveAs(js, "MyCloudStore-Config.json", fileContent);
	}
}
