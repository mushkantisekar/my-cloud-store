@page  "/myFiles"
@using  MyCloudStore.Shared.Responses;
@using MyCloudStore.CryptoLibrary.Hash;
@inject HttpClient  httpClient;
@inject IFileService fileService;
@inject IModalService  modalService;
@inject IJSRuntime js;

<h3>My Files</h3>

<div class="row">
	<div class="col-12">
		Current used space @progressValuePercent
	</div>
	<div class="col-12">
		Free: @difference KBs
	</div>
	<div class=" col-6 p-0 mb-2 ml-2 mt-2">
		<div class="progress">
			<div class="progress-bar progress-bar-striped bg-success" role="progressbar" aria-valuenow=@value.ToString() aria-valuemin="0" aria-valuemax=@max.ToString()>@progressValuePercent</div>
		</div>
	</div>
	@*<progress max="@storageSpace.MaxKBs" value="@storageSpace.CurrentKBs" />*@

</div>
@if (!String.IsNullOrEmpty(ErrorMessage))
{
	<div class="alert alert-danger" role="alert">
		<strong>@ErrorMessage</strong>
		<button type="button" class="close" data-dismiss="alert" aria-label="Close">
			<span aria-hidden="true">&times;</span>
		</button>
	</div>
}

@if (files == null)
{
	<p><em>Loading file list...</em></p>
}
else if (files.Count() == 0)
{
	<p><em>There are no files.</em></p>
}
else
{
	<table class="table table-hover">
		<thead>
			<tr>
				<th>Name</th>
				<th>Uploaded on</th>
				<th></th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var file in files)
			{
				<tr>
					<td>@file.FileName</td>
					<td>@file.Created.ToShortDateString()</td>
					<td>
						<button @onclick="@(() => ShowHashValueModal(file.HashValue))" class="btn btn-primary">
							<span class="oi oi-eye" aria-hidden="true"></span>
							See hash
						</button>
					</td>
					<td>
						<button @onclick="@(() => Download(file.Id))" class="btn btn-primary">
							<span class="oi oi-cloud-download" aria-hidden="true"></span>
							Download
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@functions {
	List<FileResult> files;
	string ErrorMessage { get; set; }
	int max { get; set; }
	int value { get; set; }
	string progressValuePercent { get; set; } = "";
	double difference { get; set; }
	StorageSpace storageSpace { get; set; } = new StorageSpace() { CurrentKBs = 0, MaxKBs = 100 };

	protected void ShowHashValueModal(string hashValue)
	{
		var parameters = new ModalParameters();
		parameters.Add("HashValue", hashValue);

		modalService.Show<TigerHashValue>("Tiger Hash Value", parameters);
	}

	protected async Task Download(Guid fileId)
	{
		// TODO
		// get algorithm and key
		string algorithm = await fileService.GetAlgorithm(fileId);
		if (algorithm == null)
		{
			ErrorMessage = "Please upload the configuration file";
			this.StateHasChanged();
			return;
		}

		string key = await fileService.GetKey(fileId);
		if (key == null)
		{
			ErrorMessage = "Please upload the configuration file";
			this.StateHasChanged();
			return;
		}

		FileResult file = await fileService.GetFileAsync(fileId, algorithm, key);

		// then:

		// check if the hash value matches
		TigerHash tigerHasher = new TigerHash();
		byte[] receivedFileHash = tigerHasher.Hash(file.Content, file.Content.Length);
		string receivedFileHashString = Convert.ToBase64String(receivedFileHash);

		if (receivedFileHashString != file.HashValue)
		{
			Console.WriteLine(receivedFileHashString);
			Console.WriteLine(file.HashValue);
			ErrorMessage = "Hash values are not matching. Error occured during decryption.";
			StateHasChanged();
			return;
		}

		await FileUtil.SaveAs(js, file.FileName, file.Content);
	}

	protected override async Task OnInitializedAsync()
	{
		await Load();
	}

	protected async Task Load()
	{
		files = await fileService.GetFilesAsync();
		if (files == null)
			files = new List<FileResult>();
		storageSpace = await fileService.GetStorageSpace();
		max = (int)storageSpace.MaxKBs;
		value = (int)storageSpace.CurrentKBs;
		difference = (double)storageSpace.MaxKBs - storageSpace.CurrentKBs;
		difference = Math.Truncate(difference * 100) / 100;
		var percent = (storageSpace.CurrentKBs / storageSpace.MaxKBs) * 100;
		percent = Math.Truncate(percent * 100) / 100;
		progressValuePercent = percent.ToString() + " %";
	}
}