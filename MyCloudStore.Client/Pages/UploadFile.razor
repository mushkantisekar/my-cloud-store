@using  System.IO;
@using  System.Text;
@using  MyCloudStore.Shared.Requests;
@inject IFileReaderService  fileReaderService;
@inject IFileService  fileService;
@page "/uploadFile"

<h3>Upload File</h3>

<div class="container row">
	<div class="col-6">
		<select id="algorithm" class="form-control" @bind="Algorithm">
			<option value="A52">A5/2</option>
			<option value="RC4">RC4</option>
		</select>
		<br />
		<div class="radio">
			<label><input type="radio" name="keyInput" value="auto" checked onclick="document.getElementById('keyValue').disabled = true; document.getElementById('keyValue').value = '';" /> Auto-generate the key</label>
		</div>
		<div class="radio">
			<label><input type="radio" name="keyInput" value="manually" onclick="document.getElementById('keyValue').disabled = false;" /> Choose your own key</label>
		</div>

		<div class="form-group mb-2">
			<label>Enter the key: </label>
			<input type="text" id="keyValue" class="form-control" name="keyValue" @bind=EnteredKey disabled />
		</div>

		<input type="file" @ref=inputTypeFileElement />
		<div class="mb-2 mt-2">
			<button @onclick=ReadFile class="btn btn-primary">Upload file</button>
			<button @onclick=ClearFile class="btn btn-primary">Clear</button>
		</div>
		<progress max="@max" value="@value" />

		@*<div class="mt-2">
			<textarea style="max-width: 100%;" cols="50" rows="20">@Output</textarea>
		</div>*@
	</div>
</div>
@code {

	[Parameter]
	public int BufferSize { get; set; } = 20480;
	public long max;
	public long value;
	public string EnteredKey { get; set; }
	public string Output { get; set; }
	public string Algorithm { get; set; } = "A52";
	ElementReference inputTypeFileElement;

	public async Task ClearFile()
	{
		await fileReaderService.CreateReference(inputTypeFileElement).ClearValue();
	}

	public async Task ReadFile()
	{
		max = 0;
		value = 0;
		Output = string.Empty;
		this.StateHasChanged();
		var nl = Environment.NewLine;
		var files = (await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync()).ToList();
		foreach (var file in files)
		{
			max += (await file.ReadFileInfoAsync()).Size;
		}
		foreach (var file in files)
		{
			var fileInfo = await file.ReadFileInfoAsync();
			Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Name)}: {fileInfo.Name}{nl}";
			Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Size)}: {fileInfo.Size}{nl}";
			Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Type)}: {fileInfo.Type}{nl}";
			Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.LastModifiedDate)}: {fileInfo.LastModifiedDate?.ToString() ?? "(N/A)"}{nl}";
			Output += $"Reading file...";
			this.StateHasChanged();
			Console.WriteLine(Output);
			using (var fs = await file.OpenReadAsync())
			{
				var buffer = new byte[BufferSize];
				int count;
				var lastAnnounce = 0m;
				while ((count = await fs.ReadAsync(buffer, 0, buffer.Length)) != 0)
				{
					value += count;
					var progress = ((decimal)fs.Position * 100) / fs.Length;
					if (progress > (lastAnnounce + 10))
					{
						Output += $"Read {count} bytes ({progress:00}%). {fs.Position} / {fs.Length}{nl}";
						this.StateHasChanged();
						lastAnnounce = progress;
					}
				}
				Output += $"Done reading file {fileInfo.Name} - {fs.Length} bytes.";
			}



			using (var fs = await file.OpenReadAsync())
			{
				//var buffer = new byte[fs.Length];
				//await fs.ReadAsync(buffer, 0, (int)fs.Length);
				var key = await HandleKey();
				await fileService.UploadFileAsync(fs, fileInfo.Name, Algorithm, key);
			}
			this.StateHasChanged();

			//var multiform = new MultipartFormDataContent();
			//multiform.Add(new StreamContent(await file.OpenReadAsync(), fileInfo.Size), "files", fileInfo.Name);
		}
	}

	private async Task<string> HandleKey()
	{
		byte[] keyByteArray = null;
		Random rnd = new Random();
		if (String.IsNullOrEmpty(EnteredKey))
		{
			Console.WriteLine("Algorithm:" + Algorithm);
			if (Algorithm == "A52")
			{
				keyByteArray = new byte[8];
				rnd.NextBytes(keyByteArray);
			}
			else if (Algorithm == "RC4")
			{
				keyByteArray = new byte[16];
				rnd.NextBytes(keyByteArray);
			}
		}
		else
		{
			keyByteArray = Encoding.ASCII.GetBytes(EnteredKey);
		}

		//else
		//{
		//	if (Algorithm == "A5/2" && EnteredKey<8)
		//	{
		//		keyByteArray = new byte[8 - EnteredKey.Length];
		//		rnd.NextBytes(keyByteArray);
		//		byte[] keyBytes = Encoding.ASCII.GetBytes(EnteredKey);
		//	}
		//	else if (Algorithm == "RC4" && EnteredKey<16)
		//	{
		//		keyByteArray = new byte[16 - EnteredKey.Length];
		//		rnd.NextBytes(keyByteArray);
		//	}
		//}

		return Convert.ToBase64String(keyByteArray);
	}
}
