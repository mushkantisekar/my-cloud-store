@using  System.IO;
@using  MyCloudStore.Shared.Requests;
@inject IFileReaderService  fileReaderService;
@inject IFileService  fileService;
@page "/uploadFile"

<h3>UploadFile</h3>


<select id="algorithm" class="form-control">
	<option value="A5/2">A5/2</option>
	<option value="RC4">RC4</option>
</select>
<br />
<input type="file" @ref=inputTypeFileElement />
<button @onclick=ReadFile class="btn btn-primary">Read file</button>
<button @onclick=ClearFile class="btn btn-primary">Clear</button>
<br />
<br />
<progress max="@max" value="@value" />
<br />
<br />
<textarea style="max-width: 100%;" cols="50" rows="20">@Output</textarea>
@code {

	[Parameter]
	public int BufferSize { get; set; } = 20480;
	public long max;
	public long value;
	public string Output { get; set; }
	public string Algorithm { get; set; }
	ElementReference inputTypeFileElement;

	public async Task ClearFile()
	{
		await fileReaderService.CreateReference(inputTypeFileElement).ClearValue();
	}

	public async Task ReadFile()
	{
		max = 0;
		value = 0;
		Output = string.Empty;
		this.StateHasChanged();
		var nl = Environment.NewLine;
		var files = (await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync()).ToList();
		foreach (var file in files)
		{
			max += (await file.ReadFileInfoAsync()).Size;
		}
		foreach (var file in files)
		{
			var fileInfo = await file.ReadFileInfoAsync();
			Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Name)}: {fileInfo.Name}{nl}";
			Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Size)}: {fileInfo.Size}{nl}";
			Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Type)}: {fileInfo.Type}{nl}";
			Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.LastModifiedDate)}: {fileInfo.LastModifiedDate?.ToString() ?? "(N/A)"}{nl}";
			Output += $"Reading file...";
			this.StateHasChanged();
			Console.WriteLine(Output);
			using (var fs = await file.OpenReadAsync())
			{
				var buffer = new byte[BufferSize];
				int count;
				var lastAnnounce = 0m;
				while ((count = await fs.ReadAsync(buffer, 0, buffer.Length)) != 0)
				{
					value += count;
					var progress = ((decimal)fs.Position * 100) / fs.Length;
					if (progress > (lastAnnounce + 10))
					{
						Output += $"Read {count} bytes ({progress:00}%). {fs.Position} / {fs.Length}{nl}";
						this.StateHasChanged();
						lastAnnounce = progress;
					}
				}
				Output += $"Done reading file {fileInfo.Name} - {fs.Length} bytes.";
			}

			using (var fs = await file.OpenReadAsync())
			{
				//var buffer = new byte[fs.Length];
				//await fs.ReadAsync(buffer, 0, (int)fs.Length);

				await fileService.UploadFileAsync(fs, fileInfo.Name);
			}
			this.StateHasChanged();

			//var multiform = new MultipartFormDataContent();
			//multiform.Add(new StreamContent(await file.OpenReadAsync(), fileInfo.Size), "files", fileInfo.Name);
		}
	}
}
